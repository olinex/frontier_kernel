// Some packages need to compile third-party non-Rust code,
// for example C libraries. Other packages need to link to C libraries
// which can either be located on the system or possibly need to be built from source.
// Others still need facilities for functionality such as code generation before building (think parser generators).

// Cargo does not aim to replace other tools that are well-optimized for these tasks,
// but it does integrate with them with custom build scripts.
// Placing a file named build.rs in the root of a package will cause Cargo to compile that script and execute it just before building the package.

use std::fs::{read_dir, File};
use std::io::{Result, Write};

static TARGET_PATH: &str = "../user/target/riscv64gc-unknown-none-elf/release/";

fn main() {
    println!("cargo:rerun-if-changed=../user/src/");
    println!("cargo:rerun-if-changed={}", TARGET_PATH);
    insert_app_data().unwrap();
}

fn insert_app_data() -> Result<()> {
    let mut f = File::create("./src/assemble/link_app.asm")?;
    let mut apps: Vec<_> = read_dir("../user/src/bin")?
        .into_iter()
        .map(|dir_entry| {
            let mut name_with_ext = dir_entry.unwrap().file_name().into_string().unwrap();
            name_with_ext.drain(name_with_ext.find('.').unwrap()..name_with_ext.len());
            name_with_ext
        })
        .collect();
    apps.sort();

    writeln!(
        f,
        r"
// ****************** this asemble file was generated by build.rs ******************
// ****************** do not change it by editor !!!!!!!!!!!!!!  ******************
    .align 3
    .section .data
    .global _addr_app_count
_addr_app_count:
    .quad {}",
        apps.len()
    )?;

    for i in 0..apps.len() {
        writeln!(f, r#"    .quad app_{}_start"#, i)?;
    }
    writeln!(f, r#"    .quad app_{}_end"#, apps.len() - 1)?;

    for (idx, app) in apps.iter().enumerate() {
        println!("app_{}: {}", idx, app);
        writeln!(
            f,
            r#"
    .section .data
    .global app_{0}_start
    .global app_{0}_end
app_{0}_start:
    .incbin "{2}{1}.bin"
app_{0}_end:"#,
            idx, app, TARGET_PATH
        )?;
    }
    Ok(())
}
